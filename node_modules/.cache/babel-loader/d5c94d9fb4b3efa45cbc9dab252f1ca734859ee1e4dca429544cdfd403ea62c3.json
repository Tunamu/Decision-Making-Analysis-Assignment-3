{"ast":null,"code":"import { VictoryTheme } from \"../victory-theme/victory-theme\";\n\n/**\n * Given an object with CSS/SVG transform definitions, return the string value\n * for use with the `transform` CSS property or SVG attribute. Note that we\n * can't always guarantee the order will match the author's intended order, so\n * authors should only use the object notation if they know that their transform\n * is commutative or that there is only one.\n * @param {Object} obj An object of transform definitions.\n * @returns {String} The generated transform string.\n */\nexport const toTransformString = function (obj) {\n  for (var _len = arguments.length, more = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    more[_key - 1] = arguments[_key];\n  }\n  if (more.length > 0) {\n    return more.reduce((memo, currentObj) => {\n      return [memo, toTransformString(currentObj)].join(\" \");\n    }, toTransformString(obj)).trim();\n  }\n  if (obj === undefined || obj === null || typeof obj === \"string\") {\n    return obj;\n  }\n  const transforms = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const value = obj[key];\n      transforms.push(`${key}(${value})`);\n    }\n  }\n  return transforms.join(\" \").trim();\n};\n\n/**\n * Given the name of a color scale, getColorScale will return an array\n * of 5 hex string values in that color scale. If no 'name' parameter\n * is given, it will return the Victory default grayscale.\n * @param {String} name The name of the color scale to return (optional).\n * @param {Object} theme The theme object to retrieve the color scale from (optional).\n * @returns {Array} An array of 5 hex string values composing a color scale.\n */\nexport function getColorScale(name, theme) {\n  if (theme === void 0) {\n    theme = VictoryTheme.material;\n  }\n  const {\n    palette: {\n      grayscale = [\"#cccccc\", \"#969696\", \"#636363\", \"#252525\"],\n      qualitative = [],\n      heatmap = [],\n      warm = [],\n      cool = [],\n      red = [],\n      blue = [],\n      green = []\n    } = {}\n  } = theme;\n  const scales = {\n    grayscale,\n    qualitative,\n    heatmap,\n    warm,\n    cool,\n    red,\n    blue,\n    green\n  };\n  const selectedScale = name && scales[name]?.length ? scales[name] : scales.grayscale;\n  return selectedScale;\n}","map":{"version":3,"names":["VictoryTheme","toTransformString","obj","_len","arguments","length","more","Array","_key","reduce","memo","currentObj","join","trim","undefined","transforms","key","hasOwnProperty","value","push","getColorScale","name","theme","material","palette","grayscale","qualitative","heatmap","warm","cool","red","blue","green","scales","selectedScale"],"sources":["/Users/munatus/dev/react/assignment-2/node_modules/victory-core/es/victory-util/style.js"],"sourcesContent":["import { VictoryTheme } from \"../victory-theme/victory-theme\";\n\n/**\n * Given an object with CSS/SVG transform definitions, return the string value\n * for use with the `transform` CSS property or SVG attribute. Note that we\n * can't always guarantee the order will match the author's intended order, so\n * authors should only use the object notation if they know that their transform\n * is commutative or that there is only one.\n * @param {Object} obj An object of transform definitions.\n * @returns {String} The generated transform string.\n */\nexport const toTransformString = function (obj) {\n  for (var _len = arguments.length, more = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    more[_key - 1] = arguments[_key];\n  }\n  if (more.length > 0) {\n    return more.reduce((memo, currentObj) => {\n      return [memo, toTransformString(currentObj)].join(\" \");\n    }, toTransformString(obj)).trim();\n  }\n  if (obj === undefined || obj === null || typeof obj === \"string\") {\n    return obj;\n  }\n  const transforms = [];\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      const value = obj[key];\n      transforms.push(`${key}(${value})`);\n    }\n  }\n  return transforms.join(\" \").trim();\n};\n\n/**\n * Given the name of a color scale, getColorScale will return an array\n * of 5 hex string values in that color scale. If no 'name' parameter\n * is given, it will return the Victory default grayscale.\n * @param {String} name The name of the color scale to return (optional).\n * @param {Object} theme The theme object to retrieve the color scale from (optional).\n * @returns {Array} An array of 5 hex string values composing a color scale.\n */\nexport function getColorScale(name, theme) {\n  if (theme === void 0) {\n    theme = VictoryTheme.material;\n  }\n  const {\n    palette: {\n      grayscale = [\"#cccccc\", \"#969696\", \"#636363\", \"#252525\"],\n      qualitative = [],\n      heatmap = [],\n      warm = [],\n      cool = [],\n      red = [],\n      blue = [],\n      green = []\n    } = {}\n  } = theme;\n  const scales = {\n    grayscale,\n    qualitative,\n    heatmap,\n    warm,\n    cool,\n    red,\n    blue,\n    green\n  };\n  const selectedScale = name && scales[name]?.length ? scales[name] : scales.grayscale;\n  return selectedScale;\n}"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gCAAgC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,SAAAA,CAAUC,GAAG,EAAE;EAC9C,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IAC1GF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EAClC;EACA,IAAIF,IAAI,CAACD,MAAM,GAAG,CAAC,EAAE;IACnB,OAAOC,IAAI,CAACG,MAAM,CAAC,CAACC,IAAI,EAAEC,UAAU,KAAK;MACvC,OAAO,CAACD,IAAI,EAAET,iBAAiB,CAACU,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IACxD,CAAC,EAAEX,iBAAiB,CAACC,GAAG,CAAC,CAAC,CAACW,IAAI,CAAC,CAAC;EACnC;EACA,IAAIX,GAAG,KAAKY,SAAS,IAAIZ,GAAG,KAAK,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAChE,OAAOA,GAAG;EACZ;EACA,MAAMa,UAAU,GAAG,EAAE;EACrB,KAAK,MAAMC,GAAG,IAAId,GAAG,EAAE;IACrB,IAAIA,GAAG,CAACe,cAAc,CAACD,GAAG,CAAC,EAAE;MAC3B,MAAME,KAAK,GAAGhB,GAAG,CAACc,GAAG,CAAC;MACtBD,UAAU,CAACI,IAAI,CAAC,GAAGH,GAAG,IAAIE,KAAK,GAAG,CAAC;IACrC;EACF;EACA,OAAOH,UAAU,CAACH,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;AACpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,aAAaA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACzC,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;IACpBA,KAAK,GAAGtB,YAAY,CAACuB,QAAQ;EAC/B;EACA,MAAM;IACJC,OAAO,EAAE;MACPC,SAAS,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;MACxDC,WAAW,GAAG,EAAE;MAChBC,OAAO,GAAG,EAAE;MACZC,IAAI,GAAG,EAAE;MACTC,IAAI,GAAG,EAAE;MACTC,GAAG,GAAG,EAAE;MACRC,IAAI,GAAG,EAAE;MACTC,KAAK,GAAG;IACV,CAAC,GAAG,CAAC;EACP,CAAC,GAAGV,KAAK;EACT,MAAMW,MAAM,GAAG;IACbR,SAAS;IACTC,WAAW;IACXC,OAAO;IACPC,IAAI;IACJC,IAAI;IACJC,GAAG;IACHC,IAAI;IACJC;EACF,CAAC;EACD,MAAME,aAAa,GAAGb,IAAI,IAAIY,MAAM,CAACZ,IAAI,CAAC,EAAEhB,MAAM,GAAG4B,MAAM,CAACZ,IAAI,CAAC,GAAGY,MAAM,CAACR,SAAS;EACpF,OAAOS,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}