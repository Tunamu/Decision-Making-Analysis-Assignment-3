{"ast":null,"code":"function valueReader() {\n  //For checkboxes\n  const checkboxElements = [...document.querySelectorAll('.checkboxes')];\n  const checkboxValues = checkboxElements.map(element => element.checked);\n  console.log(\"checkbox values are: \" + checkboxValues);\n\n  //For weigths\n  const weightElements = [...document.querySelectorAll('.weigthInputs')];\n  const weightValues = weightElements.map(input => parseInt(input.value));\n  console.log(\"weight values are: \" + weightValues);\n\n  //Fro the all values \n  const inputElements = [...document.querySelectorAll('.numberArea')];\n  const inputValues = inputElements.map(input => parseInt(input.value));\n  console.log(\"The all values are: \" + inputValues);\n\n  //For job names\n  const jobElements = [...document.querySelectorAll('.Alternative-Inputs')];\n  const jobValues = jobElements.map(input => input.value);\n  console.log(\"job names are: \" + jobValues);\n\n  //For parameter names \n  const parameterElements = [...document.querySelectorAll('.texte')];\n  const parameterValues = parameterElements.map(input => input.value);\n  console.log(\"job names are: \" + parameterValues);\n}\nfunction valueFormatter() {\n  setRow(1);\n  setColumn(3);\n\n  //For formatting the input areas\n\n  const checkboxElements = [...document.querySelectorAll('.checkboxes')];\n  checkboxElements.forEach(checkbox => checkbox.checked = true);\n  const weightElements = [...document.querySelectorAll('.weigthInputs')];\n  weightElements.forEach(input => input.value = '');\n  const inputElements = [...document.querySelectorAll('.numberArea')];\n  inputElements.forEach(input => input.value = '');\n  const jobElements = [...document.querySelectorAll('.Alternative-Inputs')];\n  jobElements.forEach(element => element.value = '');\n  const parameterElements = [...document.querySelectorAll('.texte')];\n  parameterElements.forEach(element => element.value = '');\n}","map":{"version":3,"names":["valueReader","checkboxElements","document","querySelectorAll","checkboxValues","map","element","checked","console","log","weightElements","weightValues","input","parseInt","value","inputElements","inputValues","jobElements","jobValues","parameterElements","parameterValues","valueFormatter","setRow","setColumn","forEach","checkbox"],"sources":["/Users/munatus/dev/react/assignment-2/src/Functions.js"],"sourcesContent":["function valueReader(){\n    //For checkboxes\n    const checkboxElements = [...document.querySelectorAll('.checkboxes')];\n    const checkboxValues = checkboxElements.map(element => element.checked);\n    console.log(\"checkbox values are: \"+checkboxValues)\n\n    //For weigths\n    const weightElements = [...document.querySelectorAll('.weigthInputs')];\n    const weightValues = weightElements.map(input => parseInt(input.value));\n    console.log(\"weight values are: \"+weightValues)\n\n    //Fro the all values \n    const inputElements = [...document.querySelectorAll('.numberArea')];\n    const inputValues = inputElements.map(input => parseInt(input.value));\n    console.log(\"The all values are: \"+inputValues)\n\n    //For job names\n    const jobElements = [...document.querySelectorAll('.Alternative-Inputs')];\n    const jobValues = jobElements.map(input=>input.value);\n    console.log(\"job names are: \"+jobValues)\n\n    //For parameter names \n    const parameterElements = [...document.querySelectorAll('.texte')];\n    const parameterValues = parameterElements.map(input=>input.value);\n    console.log(\"job names are: \"+parameterValues)\n\n}\n\nfunction valueFormatter(){\n    setRow(1);\n    setColumn(3);\n\n    //For formatting the input areas\n\n    const checkboxElements = [...document.querySelectorAll('.checkboxes')];\n    checkboxElements.forEach(checkbox => checkbox.checked = true);\n\n    const weightElements = [...document.querySelectorAll('.weigthInputs')];\n    weightElements.forEach(input=>input.value = '')\n\n    const inputElements = [...document.querySelectorAll('.numberArea')];\n    inputElements.forEach(input=>input.value = '')\n\n    const jobElements = [...document.querySelectorAll('.Alternative-Inputs')];\n    jobElements.forEach(element=>element.value = '')\n\n    const parameterElements = [...document.querySelectorAll('.texte')]\n    parameterElements.forEach(element=> element.value='')\n}"],"mappings":"AAAA,SAASA,WAAWA,CAAA,EAAE;EAClB;EACA,MAAMC,gBAAgB,GAAG,CAAC,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,aAAa,CAAC,CAAC;EACtE,MAAMC,cAAc,GAAGH,gBAAgB,CAACI,GAAG,CAACC,OAAO,IAAIA,OAAO,CAACC,OAAO,CAAC;EACvEC,OAAO,CAACC,GAAG,CAAC,uBAAuB,GAACL,cAAc,CAAC;;EAEnD;EACA,MAAMM,cAAc,GAAG,CAAC,GAAGR,QAAQ,CAACC,gBAAgB,CAAC,eAAe,CAAC,CAAC;EACtE,MAAMQ,YAAY,GAAGD,cAAc,CAACL,GAAG,CAACO,KAAK,IAAIC,QAAQ,CAACD,KAAK,CAACE,KAAK,CAAC,CAAC;EACvEN,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAACE,YAAY,CAAC;;EAE/C;EACA,MAAMI,aAAa,GAAG,CAAC,GAAGb,QAAQ,CAACC,gBAAgB,CAAC,aAAa,CAAC,CAAC;EACnE,MAAMa,WAAW,GAAGD,aAAa,CAACV,GAAG,CAACO,KAAK,IAAIC,QAAQ,CAACD,KAAK,CAACE,KAAK,CAAC,CAAC;EACrEN,OAAO,CAACC,GAAG,CAAC,sBAAsB,GAACO,WAAW,CAAC;;EAE/C;EACA,MAAMC,WAAW,GAAG,CAAC,GAAGf,QAAQ,CAACC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;EACzE,MAAMe,SAAS,GAAGD,WAAW,CAACZ,GAAG,CAACO,KAAK,IAAEA,KAAK,CAACE,KAAK,CAAC;EACrDN,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAACS,SAAS,CAAC;;EAExC;EACA,MAAMC,iBAAiB,GAAG,CAAC,GAAGjB,QAAQ,CAACC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;EAClE,MAAMiB,eAAe,GAAGD,iBAAiB,CAACd,GAAG,CAACO,KAAK,IAAEA,KAAK,CAACE,KAAK,CAAC;EACjEN,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAACW,eAAe,CAAC;AAElD;AAEA,SAASC,cAAcA,CAAA,EAAE;EACrBC,MAAM,CAAC,CAAC,CAAC;EACTC,SAAS,CAAC,CAAC,CAAC;;EAEZ;;EAEA,MAAMtB,gBAAgB,GAAG,CAAC,GAAGC,QAAQ,CAACC,gBAAgB,CAAC,aAAa,CAAC,CAAC;EACtEF,gBAAgB,CAACuB,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAAClB,OAAO,GAAG,IAAI,CAAC;EAE7D,MAAMG,cAAc,GAAG,CAAC,GAAGR,QAAQ,CAACC,gBAAgB,CAAC,eAAe,CAAC,CAAC;EACtEO,cAAc,CAACc,OAAO,CAACZ,KAAK,IAAEA,KAAK,CAACE,KAAK,GAAG,EAAE,CAAC;EAE/C,MAAMC,aAAa,GAAG,CAAC,GAAGb,QAAQ,CAACC,gBAAgB,CAAC,aAAa,CAAC,CAAC;EACnEY,aAAa,CAACS,OAAO,CAACZ,KAAK,IAAEA,KAAK,CAACE,KAAK,GAAG,EAAE,CAAC;EAE9C,MAAMG,WAAW,GAAG,CAAC,GAAGf,QAAQ,CAACC,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;EACzEc,WAAW,CAACO,OAAO,CAAClB,OAAO,IAAEA,OAAO,CAACQ,KAAK,GAAG,EAAE,CAAC;EAEhD,MAAMK,iBAAiB,GAAG,CAAC,GAAGjB,QAAQ,CAACC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;EAClEgB,iBAAiB,CAACK,OAAO,CAAClB,OAAO,IAAGA,OAAO,CAACQ,KAAK,GAAC,EAAE,CAAC;AACzD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}